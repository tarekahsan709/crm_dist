{"version":3,"sources":["api/vehicleDetail/vehicleDetail.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","Array","status","json","entityConverted","reduce","acc","cur","i","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","send","message","found","handleError","req","findAll","include","model","catch","find","where","VehicleMasterId","params","id","body","data","update","_id"],"mappings":"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","file":"vehicleDetail.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/vehicleDetails              ->  index\n * POST    /api/vehicleDetails              ->  create\n * GET     /api/vehicleDetails/:id          ->  show\n * PUT     /api/vehicleDetails/:id          ->  upsert\n * PATCH   /api/vehicleDetails/:id          ->  patch\n * DELETE  /api/vehicleDetails/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport {VehicleDetail} from '../../sqldb';\nimport {Dealer} from '../../sqldb';\n\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function (entity) {\n        if (entity && entity != entity instanceof Array) {\n            return res.status(statusCode).json(entity);\n        } else if (entity instanceof Array) {\n            var entityConverted = entity.reduce(function (acc, cur, i) {\n                acc[i] = cur;\n                return acc;\n            }, {});\n            return res.status(statusCode).json(entityConverted);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function (entity) {\n        try {\n            jsonpatch.apply(entity, patches, /*validate*/ true);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function (entity) {\n        if (entity) {\n            return entity.destroy()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function (entity) {\n        if (!entity) {\n            res.status(404).send({\n                message: 'entity not found',\n                found: false\n            });\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function (err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of VehicleDetails\nexport function index(req, res) {\n    return VehicleDetail.findAll({\n        include: [\n            {\n                model: Dealer\n            }\n        ]\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single VehicleDetail from the DB\nexport function show(req, res) {\n    return VehicleDetail.find({\n        where: {\n            VehicleMasterId: req.params.id\n        },\n        include: [\n            {\n                model: Dealer,\n                // where: { DealerId: 'abc' }\n            }\n        ]\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new VehicleDetail in the DB\nexport function create(req, res) {\n\n    return VehicleDetail.create(req.body.data)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n//Upserts the given VehicleDetail in the DB at the specified ID\n\nexport function upsert(req, res) {\n\n    if (req.params.id == 0) {\n        return VehicleDetail.create(req.body)\n            .then(respondWithResult(res))\n            .catch(handleError(res));\n    }\n    else {\n\n        return VehicleDetail.update(req.body, {\n            where: {\n                _id: req.params.id\n            }\n        })\n            .then(respondWithResult(res))\n            .catch(handleError(res));\n    }\n\n}\n\n// Updates an existing VehicleDetail in the DB\nexport function patch(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return VehicleDetail.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(patchUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a VehicleDetail from the DB\nexport function destroy(req, res) {\n    return VehicleDetail.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n\n// Gets a list of Vehicles\n// export function index(req, res) {\n//     return Vehicle.findAll({\n//         include: [\n//             {\n//                 model: VehicleModel\n//             }, {\n//                 model: VehicleDetails,\n//                 include: [\n//                     {\n//                         model: Dealer\n//                     }\n//                 ]\n//             }\n//         ]\n//     })\n//         .then(respondWithResult(res))\n//         .catch(handleError(res));\n// }"]}