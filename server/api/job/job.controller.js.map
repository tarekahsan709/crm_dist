{"version":3,"sources":["api/job/job.controller.js"],"names":["index","show","create","upsert","patch","destroy","jobEmployee","jobProblem","changeJobStatus","respondWithResult","res","statusCode","entity","Array","status","json","entityConverted","reduce","acc","cur","i","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","handleError","send","req","findAll","include","model","catch","find","through","where","JobId","params","id","attributes","_id","employeeId","problemId","body","sequelize","transaction","t","job","query","replacements","servicing_date","Date","job_allocated_date","VehicleMasterId","type","QueryTypes","INSERT","forEach","eId","jobId","parseInt","empId","pId","console","log","vehicleMaster","employees","problems","Vehicle_master","DELETE","update","SELECT","queryResult","employeeIds","map","currentValue","EmployeeId","problemIds","ProblemId"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;;;;;;;QAqEgBA,K,GAAAA,K;QAkBAC,I,GAAAA,I;QA4CAC,M,GAAAA,M;QAqFAC,M,GAAAA,M;QA8DAC,K,GAAAA,K;QAgBAC,O,GAAAA,O;QAWAC,W,GAAAA,W;QA8BAC,U,GAAAA,U;QAuBAC,e,GAAAA,e;;AApWhB;;;;AACA;;;;;;AAQA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AACxCA,iBAAaA,cAAc,GAA3B;AACA,WAAO,UAAUC,MAAV,EAAkB;AACrB,YAAIA,UAAUA,UAAUA,kBAAkBC,KAA1C,EAAiD;AAC7C,mBAAOH,IAAII,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BH,MAA5B,CAAP;AACH,SAFD,MAEO,IAAIA,kBAAkBC,KAAtB,EAA6B;AAChC,gBAAIG,kBAAkBJ,OAAOK,MAAP,CAAc,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,CAApB,EAAuB;AACvDF,oBAAIE,CAAJ,IAASD,GAAT;AACA,uBAAOD,GAAP;AACH,aAHqB,EAGnB,EAHmB,CAAtB;;AAKA,mBAAOR,IAAII,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BC,eAA5B,CAAP;AACH;AACD,eAAO,IAAP;AACH,KAZD;AAaH;;AAED,SAASK,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,WAAO,UAAUV,MAAV,EAAkB;AACrB,YAAI;AACA,oCAAUW,KAAV,CAAgBX,MAAhB,EAAwBU,OAAxB,EAAiC,YAAa,IAA9C;AACH,SAFD,CAEE,OAAOE,GAAP,EAAY;AACV,mBAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACH;;AAED,eAAOZ,OAAOc,IAAP,EAAP;AACH,KARD;AASH;;AAED,SAASC,YAAT,CAAsBjB,GAAtB,EAA2B;AACvB,WAAO,UAAUE,MAAV,EAAkB;AACrB,YAAIA,MAAJ,EAAY;AACR,mBAAOA,OAAOP,OAAP,GACFuB,IADE,CACG,YAAM;AACRlB,oBAAII,MAAJ,CAAW,GAAX,EAAgBe,GAAhB;AACH,aAHE,CAAP;AAIH;AACJ,KAPD;AAQH;;AAED,SAASC,oBAAT,CAA8BpB,GAA9B,EAAmC;AAC/B,WAAO,UAAUE,MAAV,EAAkB;AACrB,YAAI,CAACA,MAAL,EAAa;AACTF,gBAAII,MAAJ,CAAW,GAAX,EAAgBe,GAAhB;AACA,mBAAO,IAAP;AACH;AACD,eAAOjB,MAAP;AACH,KAND;AAOH;;AAED,SAASmB,WAAT,CAAqBrB,GAArB,EAA0BC,UAA1B,EAAsC;AAClCA,iBAAaA,cAAc,GAA3B;AACA,WAAO,UAAUa,GAAV,EAAe;AAClBd,YAAII,MAAJ,CAAWH,UAAX,EAAuBqB,IAAvB,CAA4BR,GAA5B;AACH,KAFD;AAGH;;AAED;AACO,SAASxB,KAAT,CAAeiC,GAAf,EAAoBvB,GAApB,EAAyB;;AAG5B,WAAO,WAAIwB,OAAJ,CAAY;AACfC,iBAAS,CACL;AACIC,iCADJ;AAEID,qBAAS,CAAC;AACNC;AADM,aAAD;AAFb,SADK;AADM,KAAZ,EAUFR,IAVE,CAUGnB,kBAAkBC,GAAlB,CAVH,EAWF2B,KAXE,CAWIN,YAAYrB,GAAZ,CAXJ,CAAP;AAYH;;AAED;AACO,SAAST,IAAT,CAAcgC,GAAd,EAAmBvB,GAAnB,EAAwB;AAC3B,WAAO,WAAI4B,IAAJ,CAAS;AACZH,iBAAS,CAAC;AACNC,iCADM;AAENG,qBAAS;AACLC,uBAAO,EAACC,OAAOR,IAAIS,MAAJ,CAAWC,EAAnB;AADF;AAFH,SAAD,EAKN;AACCP,kCADD;AAECD,qBAAS,CAAC,EAACC,yBAAD,EAAD,CAFV;AAGCG,qBAAS;AACLK,4BAAY,CAAC,eAAD,CADP;AAELJ,uBAAO,EAACC,OAAOR,IAAIS,MAAJ,CAAWC,EAAnB;AAFF;AAHV,SALM,EAYN;AACCP;AADD,SAZM,CADG;AAgBZI,eAAO;AACHK,iBAAKZ,IAAIS,MAAJ,CAAWC;AADb;AAhBK,KAAT,EAoBFf,IApBE,CAoBGE,qBAAqBpB,GAArB,CApBH,EAqBFkB,IArBE,CAqBGnB,kBAAkBC,GAAlB,CArBH,EAsBF2B,KAtBE,CAsBIN,YAAYrB,GAAZ,CAtBJ,CAAP;AAuBH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASR,MAAT,CAAgB+B,GAAhB,EAAqBvB,GAArB,EAA0B;AAC7B,QAAIoC,UAAJ;AACA,QAAIC,SAAJ;AACA,QAAId,IAAIe,IAAJ,CAASF,UAAb,EAAyB;AACrBA,qBAAab,IAAIe,IAAJ,CAASF,UAAtB;AACAC,oBAAYd,IAAIe,IAAJ,CAASD,SAArB;AACA,eAAOd,IAAIe,IAAJ,CAASF,UAAhB;AACA,eAAOb,IAAIe,IAAJ,CAASD,SAAhB;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,WAAO,gBAAME,SAAN,CAAgBC,WAAhB,CAA4B,UAAUC,CAAV,EAAa;;AAE5C,eAAO,WAAIjD,MAAJ,CAAW+B,IAAIe,IAAf,EAAqB,EAACE,aAAaC,CAAd,EAArB,EAAuC;;AAAvC,SAEFvB,IAFE,CAEG,UAAUwB,GAAV,EAAe;;AAGjB,4BAAMH,SAAN,CAAgBI,KAAhB,CAAsB,iFAAtB,EACI;AACIC,8BAAc,EAACC,gBAAgB,IAAIC,IAAJ,CAASvB,IAAIe,IAAJ,CAASS,kBAAlB,CAAjB,EAAwDZ,KAAKZ,IAAIe,IAAJ,CAASU,eAAtE,EADlB;AAEIC,sBAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,aADJ;;AAMA,4BAAMZ,SAAN,CAAgBI,KAAhB,CAAsB,iGAAtB,EACI;AACIC,8BAAc,EAACT,KAAKZ,IAAIe,IAAJ,CAASU,eAAf,EADlB;AAEIC,sBAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,aADJ;;AAMAf,uBAAWgB,OAAX,CAAmB,UAAUC,GAAV,EAAe;AAC9B,gCAAMd,SAAN,CAAgBI,KAAhB,CAAsB,uFAAtB,EACI;AACIC,kCAAc,EAACU,OAAOC,SAASb,IAAIP,GAAb,CAAR,EAA2BqB,OAAOH,GAAlC,EADlB;AAEIJ,0BAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,iBADJ;AAKH,aAND;;AASAd,sBAAUe,OAAV,CAAkB,UAAUK,GAAV,EAAe;AAC7B,gCAAMlB,SAAN,CAAgBI,KAAhB,CAAsB,yFAAtB,EACI;AACIC,kCAAc,EAACU,OAAOC,SAASb,IAAIP,GAAb,CAAR,EAA2BE,WAAWoB,GAAtC,EADlB;AAEIR,0BAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,iBADJ;AAMH,aAPD;;AAUA,mBAAOT,GAAP;AAEH,SAtCE,CAAP;AAwCH,KA1CM,EA2CFxB,IA3CE,CA2CGnB,kBAAkBC,GAAlB,CA3CH,EA4CF2B,KA5CE,CA4CI,UAAUb,GAAV,EAAe;AAClB4C,gBAAQC,GAAR,CAAY7C,GAAZ;AACA;AACA;AACH,KAhDE,CAAP;AAmDH;;AAED;;AAEO,SAASrB,MAAT,CAAgB8B,GAAhB,EAAqBvB,GAArB,EAA0B;AAC7B,QAAI4D,aAAJ,EAAmBC,SAAnB,EAA8BC,QAA9B;;AAGA,QAAIvC,IAAIe,IAAJ,CAASH,GAAb,EAAkB;AACdyB,wBAAgBrC,IAAIe,IAAJ,CAASyB,cAAzB;AACAL,gBAAQC,GAAR,CAAYC,aAAZ;;AAEAC,oBAAYtC,IAAIe,IAAJ,CAASuB,SAArB;AACAC,mBAAWvC,IAAIe,IAAJ,CAASwB,QAApB;AACA,eAAOvC,IAAIe,IAAJ,CAASH,GAAhB;AACA,eAAOZ,IAAIe,IAAJ,CAASyB,cAAhB;AACA,eAAOxC,IAAIe,IAAJ,CAASuB,SAAhB;AACA,eAAOtC,IAAIe,IAAJ,CAASwB,QAAhB;AACH;;AAGD,oBAAMvB,SAAN,CAAgBI,KAAhB,CAAsB,+DAAtB,EACI;AACIC,sBAAc,EAACU,OAAO/B,IAAIS,MAAJ,CAAWC,EAAnB,EADlB;AAEIgB,cAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2Bc;AAFrC,KADJ;;AAMA,oBAAMzB,SAAN,CAAgBI,KAAhB,CAAsB,8DAAtB,EACI;AACIC,sBAAc,EAACU,OAAO/B,IAAIS,MAAJ,CAAWC,EAAnB,EADlB;AAEIgB,cAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2Bc;AAFrC,KADJ;;AAMAH,cAAUT,OAAV,CAAkB,UAAUC,GAAV,EAAe;;AAE7B,wBAAMd,SAAN,CAAgBI,KAAhB,CAAsB,uFAAtB,EACI;AACIC,0BAAc,EAACU,OAAO/B,IAAIS,MAAJ,CAAWC,EAAnB,EAAuBuB,OAAOH,IAAIlB,GAAlC,EADlB;AAEIc,kBAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,SADJ;AAKH,KAPD;;AASAW,aAASV,OAAT,CAAiB,UAAUK,GAAV,EAAe;AAC5B,wBAAMlB,SAAN,CAAgBI,KAAhB,CAAsB,yFAAtB,EACI;AACIC,0BAAc,EAACU,OAAO/B,IAAIS,MAAJ,CAAWC,EAAnB,EAAuBI,WAAWoB,IAAItB,GAAtC,EADlB;AAEIc,kBAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,SADJ;AAKH,KAND;;AAQA,oBAAMZ,SAAN,CAAgBI,KAAhB,CAAsB,iFAAtB,EACI;AACIC,sBAAc,EAACC,gBAAgB,IAAIC,IAAJ,CAASvB,IAAIe,IAAJ,CAASS,kBAAlB,CAAjB,EAAwDZ,KAAKZ,IAAIe,IAAJ,CAASU,eAAtE,EADlB;AAEIC,cAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BC;AAFrC,KADJ;;AAMA,WAAO,WAAIc,MAAJ,CAAW1C,IAAIe,IAAf,EAAqB;AACxBR,eAAO;AACHK,iBAAKZ,IAAIS,MAAJ,CAAWC;AADb;AADiB,KAArB,EAKFf,IALE,CAKGnB,kBAAkBC,GAAlB,CALH,EAMF2B,KANE,CAMIN,YAAYrB,GAAZ,CANJ,CAAP;AAOH;;AAED;AACO,SAASN,KAAT,CAAe6B,GAAf,EAAoBvB,GAApB,EAAyB;AAC5B,QAAIuB,IAAIe,IAAJ,CAASH,GAAb,EAAkB;AACd,eAAOZ,IAAIe,IAAJ,CAASH,GAAhB;AACH;AACD,WAAO,WAAIP,IAAJ,CAAS;AACZE,eAAO;AACHK,iBAAKZ,IAAIS,MAAJ,CAAWC;AADb;AADK,KAAT,EAKFf,IALE,CAKGE,qBAAqBpB,GAArB,CALH,EAMFkB,IANE,CAMGP,aAAaY,IAAIe,IAAjB,CANH,EAOFpB,IAPE,CAOGnB,kBAAkBC,GAAlB,CAPH,EAQF2B,KARE,CAQIN,YAAYrB,GAAZ,CARJ,CAAP;AASH;;AAED;AACO,SAASL,OAAT,CAAiB4B,GAAjB,EAAsBvB,GAAtB,EAA2B;AAC9B,WAAO,WAAI4B,IAAJ,CAAS;AACZE,eAAO;AACHK,iBAAKZ,IAAIS,MAAJ,CAAWC;AADb;AADK,KAAT,EAKFf,IALE,CAKGE,qBAAqBpB,GAArB,CALH,EAMFkB,IANE,CAMGD,aAAajB,GAAb,CANH,EAOF2B,KAPE,CAOIN,YAAYrB,GAAZ,CAPJ,CAAP;AAQH;;AAEM,SAASJ,WAAT,CAAqB2B,GAArB,EAA0BvB,GAA1B,EAA+B;AAClC,QAAIsD,QAAQ/B,IAAIS,MAAJ,CAAWC,EAAvB;;AAEA,oBAAMM,SAAN,CAAgBI,KAAhB,CAAsB,uEAAtB,EACI;AACIC,sBAAc,EAACU,OAAOC,SAASD,KAAT,CAAR,EADlB;AAEIL,cAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BgB;AAFrC,KADJ,EAIOhD,IAJP,CAIY,UAAUiD,WAAV,EAAuB;;AAE/B,YAAIC,cAAcD,YAAYE,GAAZ,CAAgB,UAAUC,YAAV,EAAwB;;AAEtD,mBAAOA,aAAaC,UAApB;AACH,SAHiB,CAAlB;;AAKA,eAAO,gBAAS/C,OAAT,CAAiB;AACpBC,qBAAS,CACL;AACIC;AADJ,aADK,CADW;AAMpBI,mBAAO;AACHK,qBAAKiC;AADF;AANa,SAAjB,EAUFlD,IAVE,CAUGnB,kBAAkBC,GAAlB,CAVH,EAWF2B,KAXE,CAWIN,YAAYrB,GAAZ,CAXJ,CAAP;AAYH,KAvBD;AAyBH;;AAEM,SAASH,UAAT,CAAoB0B,GAApB,EAAyBvB,GAAzB,EAA8B;AACjC,QAAIsD,QAAQ/B,IAAIS,MAAJ,CAAWC,EAAvB;;AAEA,oBAAMM,SAAN,CAAgBI,KAAhB,CAAsB,6DAAtB,EACI;AACIC,sBAAc,EAACU,OAAOC,SAASD,KAAT,CAAR,EADlB;AAEIL,cAAM,gBAAMV,SAAN,CAAgBW,UAAhB,CAA2BgB;AAFrC,KADJ,EAIOhD,IAJP,CAIY,UAAUiD,WAAV,EAAuB;AAC/B,YAAIK,aAAaL,YAAYE,GAAZ,CAAgB,UAAUC,YAAV,EAAwB;;AAErD,mBAAOA,aAAaG,SAApB;AACH,SAHgB,CAAjB;;AAKA,eAAO,eAAQjD,OAAR,CAAgB;AACnBM,mBAAO;AACHK,qBAAKqC;AADF;AADY,SAAhB,EAKFtD,IALE,CAKGnB,kBAAkBC,GAAlB,CALH,EAMF2B,KANE,CAMIN,YAAYrB,GAAZ,CANJ,CAAP;AAOH,KAjBD;AAkBH;;AAEM,SAASF,eAAT,CAAyByB,GAAzB,EAA8BvB,GAA9B,EAAmC;AACtC,QAAIuB,IAAIe,IAAJ,CAASH,GAAb,EAAkB;AACd,eAAOZ,IAAIe,IAAJ,CAASH,GAAhB;AACH;;AAED,WAAO,WAAI8B,MAAJ,CAAW1C,IAAIe,IAAf,EAAqB;AACxBR,eAAO;AACHK,iBAAKZ,IAAIS,MAAJ,CAAWC;AADb;AADiB,KAArB,EAKFf,IALE,CAKGnB,kBAAkBC,GAAlB,CALH,EAMF2B,KANE,CAMIN,YAAYrB,GAAZ,CANJ,CAAP;AAOH","file":"job.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/jobs              ->  index\n * POST    /api/jobs              ->  create\n * GET     /api/jobs/:id          ->  show\n * PUT     /api/jobs/:id          ->  upsert\n * PATCH   /api/jobs/:id          ->  patch\n * DELETE  /api/jobs/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport sqldb from '../../sqldb';\nimport {Job} from '../../sqldb';\nimport {Vehicle} from '../../sqldb';\nimport {VehicleModel} from '../../sqldb';\nimport {Employee} from '../../sqldb';\nimport {Problem} from '../../sqldb';\nimport {Designation} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function (entity) {\n        if (entity && entity != entity instanceof Array) {\n            return res.status(statusCode).json(entity);\n        } else if (entity instanceof Array) {\n            var entityConverted = entity.reduce(function (acc, cur, i) {\n                acc[i] = cur;\n                return acc;\n            }, {});\n\n            return res.status(statusCode).json(entityConverted);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function (entity) {\n        try {\n            jsonpatch.apply(entity, patches, /*validate*/ true);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function (entity) {\n        if (entity) {\n            return entity.destroy()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function (entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function (err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Jobs\nexport function index(req, res) {\n\n\n    return Job.findAll({\n        include: [\n            {\n                model: Vehicle,\n                include: [{\n                    model: VehicleModel\n                }]\n            }\n        ]\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Job from the DB\nexport function show(req, res) {\n    return Job.find({\n        include: [{\n            model: Problem,\n            through: {\n                where: {JobId: req.params.id}\n            }\n        }, {\n            model: Employee,\n            include: [{model: Designation}],\n            through: {\n                attributes: ['employee_name'],\n                where: {JobId: req.params.id},\n            }\n        }, {\n            model: Vehicle\n        }],\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Job in the DB\n// export function create(req, res) {\n//     var employeeId;\n//     if (req.body.employeeId) {\n//         employeeId = req.body.employeeId;\n//         delete req.body.employeeId;\n//     }\n//\n//     return Job.create(req.body) //request #1\n//         .then(function (responseInsert) {\n//             var jobId = responseInsert._id; //response handler #1\n//             console.log(jobId);\n//             return sqldb.sequelize.query('INSERT INTO jobEmployeeMappingTable(JobId, EmployeeId) VALUES (jobId, employeeId)'); //request #2\n//         })\n//         .then(respondWithResult(res, 201))\n//         .catch(handleError(res));\n//\n// }\nexport function create(req, res) {\n    var employeeId;\n    var problemId;\n    if (req.body.employeeId) {\n        employeeId = req.body.employeeId;\n        problemId = req.body.problemId;\n        delete req.body.employeeId;\n        delete req.body.problemId;\n    }\n\n    //\n    // sqldb.sequelize.query('SELECT number_of_servicing FROM Vehicle_master WHERE _id = ?',\n    //     {\n    //         replacements: [req.body.VehicleMasterId],\n    //         type: sqldb.sequelize.QueryTypes.SELECT\n    //     }\n    // ).then(number_of_servicing => {\n    //\n    //     let servicing_number = number_of_servicing[0].number_of_servicing;\n    //     console.log('Current number of servicing');\n    //     console.log(servicing_number);\n    //\n    //     sqldb.sequelize.query('UPDATE `Vehicle_master` SET `number_of_servicing` = :number_of_servicing  WHERE _id = :_id',\n    //         {\n    //             replacements: {number_of_servicing: servicing_number + 1, _id:req.body.VehicleMasterId},\n    //             type: sqldb.sequelize.QueryTypes.INSERT\n    //         });\n    // });\n\n\n    return sqldb.sequelize.transaction(function (t) {\n\n        return Job.create(req.body, {transaction: t}) // request #1\n\n            .then(function (job) {\n\n\n                sqldb.sequelize.query('UPDATE `Vehicle_master` SET `servicing_date` = :servicing_date WHERE _id = :_id',\n                    {\n                        replacements: {servicing_date: new Date(req.body.job_allocated_date), _id: req.body.VehicleMasterId},\n                        type: sqldb.sequelize.QueryTypes.INSERT\n                    });\n\n                sqldb.sequelize.query('UPDATE `Vehicle_master` SET `number_of_servicing` = `number_of_servicing` + 1  WHERE _id = :_id',\n                    {\n                        replacements: {_id: req.body.VehicleMasterId},\n                        type: sqldb.sequelize.QueryTypes.INSERT\n                    });\n\n                employeeId.forEach(function (eId) {\n                    sqldb.sequelize.query('INSERT INTO `jobEmployeeMappingTable` (`JobId`, `EmployeeId`) VALUES (:jobId, :empId)',\n                        {\n                            replacements: {jobId: parseInt(job._id), empId: eId},\n                            type: sqldb.sequelize.QueryTypes.INSERT\n                        });\n                });\n\n\n                problemId.forEach(function (pId) {\n                    sqldb.sequelize.query('INSERT INTO `jobProblemMappingTable` (`JobId`, `ProblemId`) VALUES (:jobId, :problemId)',\n                        {\n                            replacements: {jobId: parseInt(job._id), problemId: pId},\n                            type: sqldb.sequelize.QueryTypes.INSERT\n                        });\n\n                });\n\n\n                return job;\n\n            });\n\n    })\n        .then(respondWithResult(res))\n        .catch(function (err) {\n            console.log(err);\n            // Transaction has been rolled back\n            // err is whatever rejected the promise chain returned to the transaction callback\n        });\n\n\n}\n\n// Upserts the given Job in the DB at the specified ID\n\nexport function upsert(req, res) {\n    var vehicleMaster, employees, problems;\n\n\n    if (req.body._id) {\n        vehicleMaster = req.body.Vehicle_master;\n        console.log(vehicleMaster);\n\n        employees = req.body.employees;\n        problems = req.body.problems;\n        delete req.body._id;\n        delete req.body.Vehicle_master;\n        delete req.body.employees;\n        delete req.body.problems;\n    }\n\n\n    sqldb.sequelize.query('DELETE FROM `jobEmployeeMappingTable`  WHERE `JobId` = :jobId',\n        {\n            replacements: {jobId: req.params.id},\n            type: sqldb.sequelize.QueryTypes.DELETE\n        });\n\n    sqldb.sequelize.query('DELETE FROM `jobProblemMappingTable`  WHERE `JobId` = :jobId',\n        {\n            replacements: {jobId: req.params.id},\n            type: sqldb.sequelize.QueryTypes.DELETE\n        });\n\n    employees.forEach(function (eId) {\n\n        sqldb.sequelize.query('INSERT INTO `jobEmployeeMappingTable` (`JobId`, `EmployeeId`) VALUES (:jobId, :empId)',\n            {\n                replacements: {jobId: req.params.id, empId: eId._id},\n                type: sqldb.sequelize.QueryTypes.INSERT\n            });\n    });\n\n    problems.forEach(function (pId) {\n        sqldb.sequelize.query('INSERT INTO `jobProblemMappingTable` (`JobId`, `ProblemId`) VALUES (:jobId, :problemId)',\n            {\n                replacements: {jobId: req.params.id, problemId: pId._id},\n                type: sqldb.sequelize.QueryTypes.INSERT\n            });\n    });\n\n    sqldb.sequelize.query('UPDATE `Vehicle_master` SET `servicing_date` = :servicing_date WHERE _id = :_id',\n        {\n            replacements: {servicing_date: new Date(req.body.job_allocated_date), _id: req.body.VehicleMasterId},\n            type: sqldb.sequelize.QueryTypes.INSERT\n        });\n\n    return Job.update(req.body, {\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Updates an existing Job in the DB\nexport function patch(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Job.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(patchUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Job from the DB\nexport function destroy(req, res) {\n    return Job.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n\nexport function jobEmployee(req, res) {\n    let jobId = req.params.id;\n\n    sqldb.sequelize.query('SELECT EmployeeId FROM `jobEmployeeMappingTable` WHERE JobId = :jobId',\n        {\n            replacements: {jobId: parseInt(jobId)},\n            type: sqldb.sequelize.QueryTypes.SELECT\n        }).then(function (queryResult) {\n\n        var employeeIds = queryResult.map(function (currentValue) {\n\n            return currentValue.EmployeeId;\n        });\n\n        return Employee.findAll({\n            include: [\n                {\n                    model: Designation\n                }\n            ],\n            where: {\n                _id: employeeIds\n            }\n        })\n            .then(respondWithResult(res))\n            .catch(handleError(res));\n    });\n\n}\n\nexport function jobProblem(req, res) {\n    let jobId = req.params.id;\n\n    sqldb.sequelize.query('SELECT * FROM `jobProblemMappingTable` WHERE JobId = :jobId',\n        {\n            replacements: {jobId: parseInt(jobId)},\n            type: sqldb.sequelize.QueryTypes.SELECT\n        }).then(function (queryResult) {\n        var problemIds = queryResult.map(function (currentValue) {\n\n            return currentValue.ProblemId;\n        });\n\n        return Problem.findAll({\n            where: {\n                _id: problemIds\n            }\n        })\n            .then(respondWithResult(res))\n            .catch(handleError(res));\n    });\n}\n\nexport function changeJobStatus(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n\n    return Job.update(req.body, {\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n"]}