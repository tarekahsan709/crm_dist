{"version":3,"sources":["api/dealer/dealer.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","Array","status","json","entityConverted","reduce","acc","cur","i","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","handleError","send","req","findAll","catch","find","where","_id","params","id","body","update"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;;;;;;;QA+DgBA,K,GAAAA,K;QAOAC,I,GAAAA,I;QAYAC,M,GAAAA,M;QAOAC,M,GAAAA,M;QAeAC,K,GAAAA,K;QAgBAC,O,GAAAA,O;;AAtHhB;;;;AACA;;;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AACxCA,iBAAaA,cAAc,GAA3B;AACA,WAAO,UAAUC,MAAV,EAAkB;AACrB,YAAIA,UAAUA,UAAUA,kBAAkBC,KAA1C,EAAiD;AAC7C,mBAAOH,IAAII,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BH,MAA5B,CAAP;AACH,SAFD,MAEO,IAAGA,kBAAkBC,KAArB,EAA2B;AAC9B,gBAAIG,kBAAkBJ,OAAOK,MAAP,CAAc,UAASC,GAAT,EAAcC,GAAd,EAAmBC,CAAnB,EAAsB;AACtDF,oBAAIE,CAAJ,IAASD,GAAT;AACA,uBAAOD,GAAP;AACH,aAHqB,EAGnB,EAHmB,CAAtB;;AAKA,mBAAOR,IAAII,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BC,eAA5B,CAAP;AACH;AACD,eAAO,IAAP;AACH,KAZD;AAaH;;AAED,SAASK,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,WAAO,UAAUV,MAAV,EAAkB;AACrB,YAAI;AACA,oCAAUW,KAAV,CAAgBX,MAAhB,EAAwBU,OAAxB,EAAiC,YAAa,IAA9C;AACH,SAFD,CAEE,OAAOE,GAAP,EAAY;AACV,mBAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACH;;AAED,eAAOZ,OAAOc,IAAP,EAAP;AACH,KARD;AASH;;AAED,SAASC,YAAT,CAAsBjB,GAAtB,EAA2B;AACvB,WAAO,UAAUE,MAAV,EAAkB;AACrB,YAAIA,MAAJ,EAAY;AACR,mBAAOA,OAAOJ,OAAP,GACFoB,IADE,CACG,YAAM;AACRlB,oBAAII,MAAJ,CAAW,GAAX,EAAgBe,GAAhB;AACH,aAHE,CAAP;AAIH;AACJ,KAPD;AAQH;;AAED,SAASC,oBAAT,CAA8BpB,GAA9B,EAAmC;AAC/B,WAAO,UAAUE,MAAV,EAAkB;AACrB,YAAI,CAACA,MAAL,EAAa;AACTF,gBAAII,MAAJ,CAAW,GAAX,EAAgBe,GAAhB;AACA,mBAAO,IAAP;AACH;AACD,eAAOjB,MAAP;AACH,KAND;AAOH;;AAED,SAASmB,WAAT,CAAqBrB,GAArB,EAA0BC,UAA1B,EAAsC;AAClCA,iBAAaA,cAAc,GAA3B;AACA,WAAO,UAAUa,GAAV,EAAe;AAClBd,YAAII,MAAJ,CAAWH,UAAX,EAAuBqB,IAAvB,CAA4BR,GAA5B;AACH,KAFD;AAGH;;AAED;AACO,SAASrB,KAAT,CAAe8B,GAAf,EAAoBvB,GAApB,EAAyB;AAC5B,WAAO,cAAOwB,OAAP,GACFN,IADE,CACGnB,kBAAkBC,GAAlB,CADH,EAEFyB,KAFE,CAEIJ,YAAYrB,GAAZ,CAFJ,CAAP;AAGH;;AAED;AACO,SAASN,IAAT,CAAc6B,GAAd,EAAmBvB,GAAnB,EAAwB;AAC3B,WAAO,cAAO0B,IAAP,CAAY;AACfC,eAAO;AACHC,iBAAKL,IAAIM,MAAJ,CAAWC;AADb;AADQ,KAAZ,EAKFZ,IALE,CAKGE,qBAAqBpB,GAArB,CALH,EAMFkB,IANE,CAMGnB,kBAAkBC,GAAlB,CANH,EAOFyB,KAPE,CAOIJ,YAAYrB,GAAZ,CAPJ,CAAP;AAQH;;AAED;AACO,SAASL,MAAT,CAAgB4B,GAAhB,EAAqBvB,GAArB,EAA0B;AAC7B,WAAO,cAAOL,MAAP,CAAc4B,IAAIQ,IAAlB,EACFb,IADE,CACGnB,kBAAkBC,GAAlB,EAAuB,GAAvB,CADH,EAEFyB,KAFE,CAEIJ,YAAYrB,GAAZ,CAFJ,CAAP;AAGH;;AAED;AACO,SAASJ,MAAT,CAAgB2B,GAAhB,EAAqBvB,GAArB,EAA0B;AAC7B,QAAIuB,IAAIQ,IAAJ,CAASH,GAAb,EAAkB;AACd,eAAOL,IAAIQ,IAAJ,CAASH,GAAhB;AACH;;AAED,WAAO,cAAOI,MAAP,CAAcT,IAAIQ,IAAlB,EAAwB;AAC3BJ,eAAO;AACHC,iBAAKL,IAAIM,MAAJ,CAAWC;AADb;AADoB,KAAxB,EAKFZ,IALE,CAKGnB,kBAAkBC,GAAlB,CALH,EAMFyB,KANE,CAMIJ,YAAYrB,GAAZ,CANJ,CAAP;AAOH;;AAED;AACO,SAASH,KAAT,CAAe0B,GAAf,EAAoBvB,GAApB,EAAyB;AAC5B,QAAIuB,IAAIQ,IAAJ,CAASH,GAAb,EAAkB;AACd,eAAOL,IAAIQ,IAAJ,CAASH,GAAhB;AACH;AACD,WAAO,cAAOF,IAAP,CAAY;AACfC,eAAO;AACHC,iBAAKL,IAAIM,MAAJ,CAAWC;AADb;AADQ,KAAZ,EAKFZ,IALE,CAKGE,qBAAqBpB,GAArB,CALH,EAMFkB,IANE,CAMGP,aAAaY,IAAIQ,IAAjB,CANH,EAOFb,IAPE,CAOGnB,kBAAkBC,GAAlB,CAPH,EAQFyB,KARE,CAQIJ,YAAYrB,GAAZ,CARJ,CAAP;AASH;;AAED;AACO,SAASF,OAAT,CAAiByB,GAAjB,EAAsBvB,GAAtB,EAA2B;AAC9B,WAAO,cAAO0B,IAAP,CAAY;AACfC,eAAO;AACHC,iBAAKL,IAAIM,MAAJ,CAAWC;AADb;AADQ,KAAZ,EAKFZ,IALE,CAKGE,qBAAqBpB,GAArB,CALH,EAMFkB,IANE,CAMGD,aAAajB,GAAb,CANH,EAOFyB,KAPE,CAOIJ,YAAYrB,GAAZ,CAPJ,CAAP;AAQH","file":"dealer.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/dealers              ->  index\n * POST    /api/dealers              ->  create\n * GET     /api/dealers/:id          ->  show\n * PUT     /api/dealers/:id          ->  upsert\n * PATCH   /api/dealers/:id          ->  patch\n * DELETE  /api/dealers/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport {Dealer} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function (entity) {\n        if (entity && entity != entity instanceof Array) {\n            return res.status(statusCode).json(entity);\n        } else if(entity instanceof Array){\n            var entityConverted = entity.reduce(function(acc, cur, i) {\n                acc[i] = cur;\n                return acc;\n            }, {});\n            \n            return res.status(statusCode).json(entityConverted);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function (entity) {\n        try {\n            jsonpatch.apply(entity, patches, /*validate*/ true);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function (entity) {\n        if (entity) {\n            return entity.destroy()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function (entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function (err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Dealers\nexport function index(req, res) {\n    return Dealer.findAll()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Dealer from the DB\nexport function show(req, res) {\n    return Dealer.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Dealer in the DB\nexport function create(req, res) {\n    return Dealer.create(req.body)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n// Upserts the given Dealer in the DB at the specified ID\nexport function upsert(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n\n    return Dealer.update(req.body, {\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Updates an existing Dealer in the DB\nexport function patch(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Dealer.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(patchUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Dealer from the DB\nexport function destroy(req, res) {\n    return Dealer.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n"]}