{"version":3,"sources":["api/sale/sale.controller.js"],"names":["index","show","saleDetails","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","Array","status","json","entityConverted","reduce","acc","cur","i","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","handleError","send","req","findAll","include","model","catch","find","where","_id","params","id","SaleId","console","log","body","isNewCustomer","vehicleId","customerId","sequelize","transaction","t","Vehicle","vehicle","dataValues","Customer","customer","result","description","EmployeeId","sale","SalesDetails","VehicleMasterId","payment_method","principle","price","discount","down_payment","calculation_period","monthDiff","Date","credit_start_date","credit_end_date","last_date_of_the_payment","interest_rate","EmiDetails","payable_money","Math","pow","toFixed","query","replacements","type","QueryTypes","INSERT","saleDetailsResponse","customer_id","vehicle_id","sale_id","CustomerId","update","emiDetailsResponse","d1","d2","months","getFullYear","getMonth"],"mappings":"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","file":"sale.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/sales              ->  index\n * POST    /api/sales              ->  create\n * GET     /api/sales/:id          ->  show\n * PUT     /api/sales/:id          ->  upsert\n * PATCH   /api/sales/:id          ->  patch\n * DELETE  /api/sales/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport sqldb from '../../sqldb';\nimport {Sale} from '../../sqldb';\nimport {Customer} from '../../sqldb';\nimport {Employee} from '../../sqldb';\nimport {Designation} from '../../sqldb';\nimport {Area} from '../../sqldb';\nimport {SalesDetails} from '../../sqldb';\nimport {Vehicle} from '../../sqldb';\nimport {Emi} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function (entity) {\n        if (entity && entity != entity instanceof Array) {\n            return res.status(statusCode).json(entity);\n        } else if (entity instanceof Array) {\n            var entityConverted = entity.reduce(function (acc, cur, i) {\n                acc[i] = cur;\n                return acc;\n            }, {});\n\n            return res.status(statusCode).json(entityConverted);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function (entity) {\n        try {\n            jsonpatch.apply(entity, patches, /*validate*/ true);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function (entity) {\n        if (entity) {\n            return entity.destroy()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function (entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function (err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Sales\nexport function index(req, res) {\n    return Sale.findAll({\n        include: [\n            {\n                model: Employee,\n                include: [\n                    {\n                        model: Designation\n                    }\n                ]\n            },\n            {\n                model: Customer\n            }\n        ]\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Sale from the DB\nexport function show(req, res) {\n    return Sale.find({\n        where: {\n            _id: req.params.id\n        },\n        include: [\n            {\n                model: Employee,\n                include: [\n                    {\n                        model: Designation\n                    }\n                ]\n            },\n            {\n                model: Customer\n            }\n        ]\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Sale details from the DB\nexport function saleDetails(req, res) {\n    return SalesDetails.find({\n        where: {\n            SaleId: req.params.id\n        },\n        include: [{\n            model: Vehicle\n        }]\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Sale in the DB\nexport function create(req, res) {\n    console.log(req.body.isNewCustomer);\n    var vehicleId;\n    var customerId;\n    return sqldb.sequelize.transaction(function (t) {\n\n        // chain all your queries here. make sure you return them.\n        return Vehicle.create(req.body.Vehicle, {transaction: t})\n            .then(function (vehicle) {\n                vehicleId = vehicle.dataValues._id;\n                if(req.body.isNewCustomer){\n                    return Customer.create(req.body.Customer, {transaction: t});\n                } else {\n                    return vehicle;\n                }\n\n            }).then(function (customer) {\n                if(req.body.isNewCustomer){\n                    customerId = customer.dataValues._id;\n                } else {\n                    customerId = req.body.customerId;\n                    \n                }\n\n            });\n\n    }).then(function (result) {\n        return Sale.create({\n            \"description\": req.body.description,\n            \"EmployeeId\": req.body.EmployeeId,\n            \"CustomerId\": customerId\n        });\n    })\n        .then(function (sale) {\n            let SaleId = sale.dataValues._id;\n            req.body.SalesDetails.SaleId = sale.dataValues._id;\n            req.body.SalesDetails.VehicleMasterId = vehicleId;\n\n            if (req.body.SalesDetails.payment_method == 'credit') {\n                let principle = (req.body.SalesDetails.price - req.body.SalesDetails.discount) - req.body.SalesDetails.down_payment; // p\n                let calculation_period =  monthDiff(new Date(req.body.SalesDetails.credit_start_date), new Date(req.body.SalesDetails.credit_end_date)); // n\n                let t = 1; // t\n                console.log('calculation_period');\n                console.log(calculation_period);\n                let last_date_of_the_payment = req.body.SalesDetails.credit_end_date;\n                let interest_rate = req.body.EmiDetails.interest_rate; // r\n\n                // The equation is A = p * [[1 + (r/n)] ^ nt]\n                let payable_money = (principle* Math.pow((1 + (interest_rate/(calculation_period*100))), (calculation_period*t)));\n\n                console.log('payable_money');\n                console.log(payable_money);\n\n                console.log('Total interest');\n                console.log((payable_money.toFixed(2) - principle).toFixed(2));\n\n                sqldb.sequelize.query('INSERT INTO `EmiDetails` (`SaleId`,`principle`, `payable_money`, `last_date_of_the_payment`, `calculation_period`, `interest_rate`) VALUES (:SaleId, :principle, :payable_money, :last_date_of_the_payment, :calculation_period, :interest_rate)',\n                    {\n                        replacements: {\n                            SaleId: SaleId,\n                            principle: principle,\n                            payable_money: payable_money,\n                            last_date_of_the_payment: new Date(last_date_of_the_payment),\n                            calculation_period: calculation_period,\n                            interest_rate: interest_rate\n                        },\n                        type: sqldb.sequelize.QueryTypes.INSERT\n                    });\n            }\n\n            return SalesDetails.create(req.body.SalesDetails);\n        })\n        .then(function (saleDetailsResponse) {\n\n            return sqldb.sequelize.query('INSERT INTO `Customer_vehicle` (`customer_id`,`vehicle_id`) VALUES (:customer_id, :vehicle_id)',\n                {\n                    replacements: {\n                        customer_id: customerId,\n                        vehicle_id: vehicleId,\n                    },\n                    type: sqldb.sequelize.QueryTypes.INSERT\n                });\n        })\n        .then(respondWithResult(res, 201))\n        .catch(function (err) {\n            console.log('err');\n            console.log(err);\n        });\n}\n\n// Upserts the given Sale in the DB at the specified ID\n\n// export function upsert(req, res) {\n//     let customer_id = req.body.Customer._id;\n//     let vehicle_id = req.body.Vehicle._id;\n//     let sale_id = req.body.SalesDetails.SaleId;\n//\n//     let sale = {\n//         description: req.body.description,\n//         EmployeeId: req.body.EmployeeId,\n//         CustomerId: req.body.Customer._id\n//     };\n//\n//     if (req.body._id) {\n//         delete req.body.Customer._id;\n//         delete req.body.Vehicle._id;\n//         delete req.body.SalesDetails.SaleId;\n//     }\n//\n//\n//     return Customer.update(req.body.Customer, {\n//         where: {\n//             _id: customer_id\n//         }\n//     })\n//         .then(function (customerResponse) {\n//             return Vehicle.update(req.body.Vehicle, {\n//                 where: {\n//                     _id: vehicle_id\n//                 }\n//             })\n//         })\n//         .then(function (vehicleResponse) {\n//             return SalesDetails.update(req.body.SalesDetails, {\n//                 where: {\n//                     SaleId: sale_id\n//                 }\n//             })\n//         })\n//         .then(function (salesDetailsResponse) {\n//             return Sale.update(sale, {\n//                 where: {\n//                     _id: sale_id\n//                 }\n//             })\n//         })\n//         .then(respondWithResult(res))\n//         .catch(handleError(res));\n//\n//\n// }\n\nexport function upsert(req, res) {\n    let customer_id = req.body.Customer._id;\n    let vehicle_id = req.body.Vehicle._id;\n    let sale_id = req.body.SalesDetails.SaleId;\n\n    let sale = {\n        description: req.body.description,\n        EmployeeId: req.body.EmployeeId,\n        CustomerId: req.body.Customer._id\n    };\n\n    if (req.body.SalesDetails.payment_method == 'cash') {\n        Emi.destroy(\n            {\n                where: {\n                    SaleId: sale_id\n                }\n            })\n    }\n\n    if (req.body.EmiDetails) {\n        Emi.update(req.body.EmiDetails, {\n            where: {\n                SaleId: sale_id\n            }\n        })\n    }\n\n    if (req.body.Customer) {\n        delete req.body.Customer._id;\n        Customer.update(req.body.Customer, {\n            where: {\n                _id: customer_id\n            }\n        })\n    }\n\n    if (req.body.Vehicle) {\n        delete req.body.Vehicle._id;\n        Vehicle.update(req.body.Vehicle, {\n            where: {\n                _id: vehicle_id\n            }\n        })\n    }\n\n    if (req.body.SalesDetails) {\n        delete req.body.SalesDetails.SaleId;\n        req.body.SalesDetails.VehicleMasterId = vehicle_id;\n        SalesDetails.update(req.body.SalesDetails, {\n            where: {\n                SaleId: sale_id\n            }\n        })\n    }\n\n\n    return Sale.update(sale, {\n        where: {\n            _id: sale_id\n        }\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n\n\n}\n\n// Updates an existing Sale in the DB\nexport function patch(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Sale.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(patchUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Sale from the DB\nexport function destroy(req, res) {\n\n    return SalesDetails.destroy(\n        {\n            where: {\n                SaleId: req.params.id\n            }\n        })\n        .then(function (saleDetailsResponse) {\n\n            return Emi.destroy(\n                {\n                    where: {\n                        SaleId: req.params.id\n                    }\n                })\n        })\n        .then(function (emiDetailsResponse) {\n            return Sale.find({\n                where: {\n                    _id: req.params.id\n                }\n            })\n        })\n\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n\nfunction monthDiff(d1, d2) {\n    var months;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth() + 1;\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months+1;\n}\n"]}