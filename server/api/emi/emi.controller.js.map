{"version":3,"sources":["api/emi/emi.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","console","log","send","error","handleError","req","findAll","include","model","catch","find","where","SaleId","params","id","body","_id"],"mappings":"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","file":"emi.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/emis              ->  index\n * POST    /api/emis              ->  create\n * GET     /api/emis/:id          ->  show\n * PUT     /api/emis/:id          ->  upsert\n * PATCH   /api/emis/:id          ->  patch\n * DELETE  /api/emis/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport {Emi} from '../../sqldb';\nimport {Sale} from '../../sqldb';\nimport {Customer} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function (entity) {\n        if (entity) {\n            return res.status(statusCode).json(entity);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function (entity) {\n        try {\n            jsonpatch.apply(entity, patches, /*validate*/ true);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function (entity) {\n        if (entity) {\n            return entity.destroy()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    console.log('here handleEntityNotFound');\n    return function (entity) {\n        if (!entity) {\n            res.status(404).send({error: 'emi not found or added properly'});\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function (err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Emis\nexport function index(req, res) {\n    return Emi.findAll({\n        include: [\n            {\n                model: Sale,\n                include: [\n                    {\n                        model: Customer\n                    }\n                ]\n            }\n        ]\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Emi from the DB\nexport function show(req, res) {\n    console.log('Emi Show');\n    return Emi.find({\n        where: {\n            SaleId: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Emi in the DB\nexport function create(req, res) {\n    return Emi.create(req.body)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n// Upserts the given Emi in the DB at the specified ID\nexport function upsert(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n\n    return Emi.upsert(req.body, {\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Updates an existing Emi in the DB\nexport function patch(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Emi.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(patchUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Emi from the DB\nexport function destroy(req, res) {\n    return Emi.find({\n        where: {\n            _id: req.params.id\n        }\n    })\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n"]}