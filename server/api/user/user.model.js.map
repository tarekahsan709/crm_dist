{"version":3,"sources":["api/user/user.model.js"],"names":["sequelize","DataTypes","User","define","_id","type","INTEGER","allowNull","primaryKey","autoIncrement","name","STRING","firstName","lastName","activate","BOOLEAN","email","unique","msg","validate","isEmail","role","defaultValue","password","notEmpty","provider","salt","getterMethods","profile","token","hooks","beforeBulkCreate","users","fields","fn","totalUpdated","forEach","user","updatePassword","err","length","beforeCreate","beforeUpdate","changed","instanceMethods","authenticate","callback","encryptPassword","_this","pwdGen","makeSalt","byteSize","defaultByteSize","arguments","Error","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","validatePresenceOf","saltErr","encryptErr","hashedPassword","value"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\nexport default function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n\n    _id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    name: DataTypes.STRING,\n    firstName: DataTypes.STRING,\n    lastName: DataTypes.STRING,\n    activate: DataTypes.BOOLEAN,\n    email: {\n      type: DataTypes.STRING,\n      unique: {\n        msg: 'The specified email address is already in use.'\n      },\n      validate: {\n        isEmail: true\n      }\n    },\n    role: {\n      type: DataTypes.STRING,\n      defaultValue: 'user'\n    },\n    password: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true\n      }\n    },\n    provider: DataTypes.STRING,\n    salt: DataTypes.STRING\n\n  }, {\n\n    /**\n     * Virtual Getters\n     */\n    getterMethods: {\n      // Public profile information\n      profile: function() {\n        return {\n          name: this.name,\n          role: this.role\n        };\n      },\n      \n      // Non-sensitive info we'll be putting in the token\n      token: function() {\n        return {\n          _id: this._id,\n          role: this.role\n        };\n      }\n    },\n\n    /**\n     * Pre-save hooks\n     */\n    hooks: {\n      beforeBulkCreate(users, fields, fn) {\n        var totalUpdated = 0;\n        users.forEach(user => {\n          user.updatePassword(err => {\n            if(err) {\n              return fn(err);\n            }\n            totalUpdated += 1;\n            if(totalUpdated === users.length) {\n              return fn();\n            }\n          });\n        });\n      },\n      beforeCreate(user, fields, fn) {\n        user.updatePassword(fn);\n      },\n      beforeUpdate(user, fields, fn) {\n        if(user.changed('password')) {\n          return user.updatePassword(fn);\n        }\n        fn();\n      }\n    },\n\n    /**\n     * Instance Methods\n     */\n    instanceMethods: {\n      /**\n       * Authenticate - check if the passwords are the same\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {Boolean}\n       * @api public\n       */\n      authenticate(password, callback) {\n        if(!callback) {\n          return this.password === this.encryptPassword(password);\n        }\n\n        var _this = this;\n        this.encryptPassword(password, function(err, pwdGen) {\n          if(err) {\n            callback(err);\n          }\n\n          if(_this.password === pwdGen) {\n            callback(null, true);\n          }\n          else {\n            callback(null, false);\n          }\n        });\n      },\n\n      /**\n       * Make salt\n       *\n       * @param {Number} [byteSize] - Optional salt byte size, default to 16\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      makeSalt(byteSize, callback) {\n        var defaultByteSize = 16;\n\n        if(typeof arguments[0] === 'function') {\n          callback = arguments[0];\n          byteSize = defaultByteSize;\n        } else if(typeof arguments[1] === 'function') {\n          callback = arguments[1];\n        } else {\n          throw new Error('Missing Callback');\n        }\n\n        if(!byteSize) {\n          byteSize = defaultByteSize;\n        }\n\n        return crypto.randomBytes(byteSize, function(err, salt) {\n          if(err) {\n            callback(err);\n          }\n          return callback(null, salt.toString('base64'));\n        });\n      },\n\n      /**\n       * Encrypt password\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      encryptPassword(password, callback) {\n        if(!password || !this.salt) {\n          return callback ? callback(null) : null;\n        }\n\n        var defaultIterations = 10000;\n        var defaultKeyLength = 64;\n        var salt = new Buffer(this.salt, 'base64');\n\n        if(!callback) {\n          return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                       .toString('base64');\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength,\n          function(err, key) {\n            if(err) {\n              callback(err);\n            }\n            return callback(null, key.toString('base64'));\n          });\n      },\n\n      /**\n       * Update password field\n       *\n       * @param {Function} fn\n       * @return {String}\n       * @api public\n       */\n      updatePassword(fn) {\n        // Handle new/update passwords\n        if(!this.password) return fn(null);\n\n        if(!validatePresenceOf(this.password)) {\n          fn(new Error('Invalid password'));\n        }\n\n        // Make salt with a callback\n        this.makeSalt((saltErr, salt) => {\n          if(saltErr) {\n            return fn(saltErr);\n          }\n          this.salt = salt;\n          this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n            if(encryptErr) {\n              fn(encryptErr);\n            }\n            this.password = hashedPassword;\n            fn(null);\n          });\n        });\n      }\n    }\n  });\n\n  return User;\n};\n"]}