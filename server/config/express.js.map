{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","urlencoded","extended","json","req","res","next","header","initialize","secret","secrets","session","saveUninitialized","resave","store","Store","sequelize","process","SAUCE_USERNAME","webpackDevMiddleware","stripAnsi","webpack","makeWebpackConfig","webpackConfig","DEV","compiler","browserSync","create","init","open","logFileChanges","proxy","port","ws","middleware","noInfo","stats","colors","timings","chunks","browserSyncPort","plugins","plugin","console","log","hasErrors","hasWarnings","sockets","emit","title","body","toString","timeout","reload"],"mappings":"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","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport shrinkRay from 'shrink-ray';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport sqldb from '../sqldb';\nimport expressSequelizeSession from 'express-sequelize-session';\nvar Store = expressSequelizeSession(session.Store);\n\nexport default function (app) {\n    var env = app.get('env');\n\n    if (env === 'development' || env === 'test') {\n        app.use(express.static(path.join(config.root, '.tmp')));\n    }\n\n    if (env === 'production') {\n        app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    }\n\n    app.set('appPath', path.join(config.root, 'client'));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n\n    app.set('views', config.root + '/server/views');\n    app.engine('html', require('ejs').renderFile);\n    app.set('view engine', 'html');\n    app.use(shrinkRay());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    //temporary alloaw cross access\n    app.use(function (req, res, next) {\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n        next();\n    });\n    //temporary allow cross access\n    app.use(methodOverride());\n    app.use(cookieParser());\n    app.use(passport.initialize());\n\n\n    // Persist sessions with MongoStore / sequelizeStore\n    // We need to enable sessions for passport-twitter because it's an\n    // oauth 1.0 strategy, and Lusca depends on sessions\n    app.use(session({\n        secret: config.secrets.session,\n        saveUninitialized: true,\n        resave: false,\n        store: new Store(sqldb.sequelize)\n    }));\n\n    /**\n     * Lusca - express server security\n     * https://github.com/krakenjs/lusca\n     */\n    if (env !== 'test' && !process.env.SAUCE_USERNAME) {\n        // app.use(lusca({\n        //     csrf: {\n        //         angular: true\n        //     },\n        //     xframe: 'SAMEORIGIN',\n        //     hsts: {\n        //         maxAge: 31536000, //1 year, in seconds\n        //         includeSubDomains: true,\n        //         preload: true\n        //     },\n        //     xssProtection: true\n        // }));\n    }\n\n    if ('development' === env) {\n        const webpackDevMiddleware = require('webpack-dev-middleware');\n        const stripAnsi = require('strip-ansi');\n        const webpack = require('webpack');\n        const makeWebpackConfig = require('../../webpack.make');\n        const webpackConfig = makeWebpackConfig({DEV: true});\n        const compiler = webpack(webpackConfig);\n        const browserSync = require('browser-sync').create();\n\n        /**\n         * Run Browsersync and use middleware for Hot Module Replacement\n         */\n        browserSync.init({\n            open: false,\n            logFileChanges: false,\n            proxy: 'localhost:' + config.port,\n            ws: true,\n            middleware: [\n                webpackDevMiddleware(compiler, {\n                    noInfo: false,\n                    stats: {\n                        colors: true,\n                        timings: true,\n                        chunks: false\n                    }\n                })\n            ],\n            port: config.browserSyncPort,\n            plugins: ['bs-fullscreen-message']\n        });\n\n        /**\n         * Reload all devices when bundle is complete\n         * or send a fullscreen error message to the browser instead\n         */\n        compiler.plugin('done', function (stats) {\n            console.log('webpack done hook');\n            if (stats.hasErrors() || stats.hasWarnings()) {\n                return browserSync.sockets.emit('fullscreen:message', {\n                    title: \"Webpack Error:\",\n                    body: stripAnsi(stats.toString()),\n                    timeout: 100000\n                });\n            }\n            browserSync.reload();\n        });\n    }\n\n    if ('development' === env || 'test' === env) {\n        app.use(errorHandler()); // Error handler - has to be last\n    }\n}\n"]}